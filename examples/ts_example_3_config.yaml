---
# Configuration file for Torrent Suite projection, whith python as microcode.
# This is example of Torrent Suite projection from result resource as root.
dialect: python
resource_uri: 10.5.20.17
# Access data
user: ionadmin
password: 0ECu1lW

# URI of root projection on resource, this will serve as context for all lower level projections
# here we specify specific experiment result
root_projection_uri: '/rundb/api/v1/results/144/'

# Prototype of variant calling results
tsvc_vcf_prototype: &tsvc_vcf_prototype
  type: file
  children: None
  name:  " context[0]['name'] + '_TSVC_variants.vcf' "
  uri: "['/auth/output/Home/' + path.basename(context[1]['filesystempath']) + '/plugin_out/' + path.basename(environment['path']) + '/' + fetch_context(fetch_context(context[2]['experiment'])['plan'])['barcodedSamples'][context[0]['name']]['barcodes'][0] + '/TSVC_variants.vcf']"

# Prototype of settings for plugins used in current run
local_settings_prototype: &local_settings_prototype
  type: file
  children: None
  name:  " 'variant_caller_settings.json' "
  uri: "['/auth/output/Home/' + path.basename(context[1]['filesystempath']) + '/plugin_out/' + path.basename(environment['path']) + '/local_parameters.json' ]"

# BED file used for variant caller run for current sample
bed_prototype: &bed_prototype
  type: file
  children: None
  name:  "path.basename(environment['store']['targets_bed'])"
  uri: "['/auth/output/Home/' + path.basename(context[1]['filesystempath']) + '/plugin_out/'+ path.basename(environment['path']) + '/' + path.basename(environment['store']['targets_bed'])]"

# Each sample have plugin run results associated to it, this prototype specifies it`s projection contents
plugin_result_prototype: &plugin_result_prototype
  type: transparent
  children:
    local_settings_prototype: *local_settings_prototype
    bed_prototype: *bed_prototype
    tsvc_vcf_prototype: *tsvc_vcf_prototype
  name: "path.basename(content['path'])"
  uri: "[p_res for p_res in context[0]['pluginresults'] if 'variant' in fetch_context(p_res)['pluginName'] and 'VFNA' not in fetch_context(p_res)['pluginName']]"

# Each sample also have metadata associated to it, this prototype specifies it
sample_metadata_prototype: &sample_metadata_prototype
  type: file
  children: None
  name:  "'metadata.json'"
  uri: '[environment["resource_uri"]]'

# Each result have samples associated to it, samples are specified on experiment level, so this projection uses
# fetch_context function to get experiment data to resolve it`s URI.
sample_prototype: &sample_prototype
  type: transparent
  children:
    sample_metadata_prototype: *sample_metadata_prototype
    plugin_result_prototype: *plugin_result_prototype
  name: "content['name']"
  uri: "[sample['resource_uri'] for sample in fetch_context(context[0]['experiment'])['samples']]"

# This is root prototype, for which environment is specified from root projection, it will serve as root dir for projection
root:
  type: directory
  children:
    sample_prototype: *sample_prototype
  name: "path.split(content['filesystempath'])[1]"
  uri: '[environment["resource_uri"]]'
