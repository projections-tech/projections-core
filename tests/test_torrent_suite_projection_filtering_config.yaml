---
dialect: python
resource_uri: mockiontorrent.com
user: ionadmin
password: ionadmin

root_projection_uri: 'experiment?status=run&limit=1&order_by=-id'

tsvc_vcf_prototype: &tsvc_vcf_prototype
  type: file
  children: None
  name:  " 'TSVC_variants.vcf' "
  uri: "['/auth/output/Home/' + path.basename(context[1]['filesystempath']) + '/plugin_out/' + path.basename(environment['path']) + '/' + fetch_context(context[2]['plan'])['barcodedSamples'][context[0]['name']]['barcodes'][0] + '/TSVC_variants.vcf']"

local_settings_prototype: &local_settings_prototype
  type: file
  children: None
  name:  " 'variant_caller_settings.json' "
  uri: "['/auth/output/Home/' + path.basename(context[1]['filesystempath']) + '/plugin_out/' + path.basename(environment['path']) + '/local_parameters.json' ]"

bed_prototype: &bed_prototype
  type: file
  children: None
  name:  "path.basename(environment['store']['targets_bed'])"
  uri: "['/auth/output/Home/' + path.basename(context[1]['filesystempath']) + '/plugin_out/'+ path.basename(environment['path']) + '/' + path.basename(environment['store']['targets_bed'])]"

plugin_result_prototype: &plugin_result_prototype
  type: directory
  children:
    local_settings_prototype: *local_settings_prototype
    bed_prototype: *bed_prototype
    tsvc_vcf_prototype: *tsvc_vcf_prototype
  name: "path.basename(content['path'])"
  uri: "[p_res for p_res in context[0]['pluginresults'] if 'variant' in fetch_context(p_res)['pluginName'] and 'VFNA' not in fetch_context(p_res)['pluginName']]"

bam_prototype: &bam_prototype
  type: file
  children: None
  name:  "environment['name']+'.bam'"
  uri: "['/auth/output/Home/'+path.split(context[0]['filesystempath'])[1] + '/'+fetch_context(context[1]['plan'])['barcodedSamples'][environment['name']]['barcodes'][0] + '_rawlib.bam']"

sample_metadata_prototype: &sample_metadata_prototype
  type: file
  children: None
  name:  "'metadata.json'"
  uri: '[environment["resource_uri"]]'

sample_prototype: &sample_prototype
  type: directory
  children:
    sample_metadata_prototype: *sample_metadata_prototype
    bam_prototype: *bam_prototype
    plugin_result_prototype: *plugin_result_prototype
  name: "content['name']"
  uri: "[sample['resource_uri'] for sample in context[0]['samples']]"

result_prototype: &result_prototype
  type: directory
  children:
    sample_prototype: *sample_prototype
  name: "path.split(content['filesystempath'])[1]"
  uri: "[res for res in environment['results'] if path.split(fetch_context(res)['filesystempath'])[1][-1] == '1']"

exp_plan_metadata_prototype: &exp_plan_metadata_prototype
  type: file
  children: None
  name:  "'plannedexperiment.json'"
  uri: '[environment["plan"]]'

exp_metadata_prototype: &exp_metadata_prototype
  type: file
  children: None
  name:  "'metadata.json'"
  uri: '[environment["resource_uri"]]'

root:
  type: directory
  children:
    result_prototype: *result_prototype
    exp_metadata_prototype: *exp_metadata_prototype
    exp_plan_metadata_prototype: *exp_plan_metadata_prototype
  name: "content['displayName'].replace(' ', '_')"
  uri: '[object["resource_uri"] for object in environment["objects"] if object["displayName"][-1] == "1"]'
