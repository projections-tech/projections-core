---
dialect: ObjectPath
resource_uri: mockiontorrent.com
driver_config_path: "drivers/driver_configurations/iontorrent_config.yaml"

root_projection_uri: "experiment?status=run&limit=1&order_by=-id"

tsvc_vcf_prototype: &tsvc_vcf_prototype
  type: file
  children: None
  name:  " replace($.context[2].displayName, ' ', '_') + '_' + $.context[0].name + '_TSVC_variants.vcf' "
  uri: "join(['/auth/output/Home/', split($.context[1].filesystempath,'/')[-1] , '/plugin_out/' , split($.path, '/')[-1], '/' , $.context[2].plan.barcodedSamples[$.context[0].name].barcodes[0], '/TSVC_variants.vcf'])"

local_settings_prototype: &local_settings_prototype
  type: file
  children: None
  name:  " split($.context[1].filesystempath, '/')[-1] + '_variant_caller_settings.json' "
  uri: "join(['/auth/output/Home/', split($.context[1].filesystempath,'/')[-1] , '/plugin_out/' , split($.path, '/')[-1], '/local_parameters.json' ])"

bed_prototype: &bed_prototype
  type: file
  children: None
  name:  "split($.environment.store.targets_bed, '/')[-1]"
  uri: "join(['/auth/output/Home/', split($.context[1].filesystempath,'/')[-1] , '/plugin_out/' , split($.path, '/')[-1], '/' , split($.store.targets_bed, '/')[-1]])"

plugin_result_prototype: &plugin_result_prototype
  type: transparent
  children:
    bed_prototype: *bed_prototype
    local_settings_prototype: *local_settings_prototype
    tsvc_vcf_prototype: *tsvc_vcf_prototype
  name: "$.environment.name + '_' + split($.path, '/')[-1]"
  uri: " $.context[0].pluginresults[@.pluginName is 'variantCaller' and 'VFNA' not in @.pluginName].resource_uri"

bam_prototype: &bam_prototype
  type: file
  children: None
  name:  " split($.context[0].filesystempath, '/')[-1] + '_' + str($.environment.name)+'.bam' "
  uri: "join(['/auth/output/Home/', split($.context[0].filesystempath, '/')[-1], '/', $.context[1].plan.barcodedSamples[$.name].barcodes[0], '_rawlib.bam'])"

sample_metadata_prototype: &sample_metadata_prototype
  type: file
  children: None
  name:  " split($.context[0].filesystempath, '/')[-1] + '_' + $.name + '_metadata.json' "
  uri: '$.resource_uri'

sample_prototype: &sample_prototype
  type: transparent
  children:
    sample_metadata_prototype: *sample_metadata_prototype
    bam_prototype: *bam_prototype
    plugin_result_prototype: *plugin_result_prototype
  name: "$.name"
  uri: "$.context[0].samples.resource_uri"

# Each experiment have results of run analysis associated to it, we create dir to contain this results
result_prototype: &result_prototype
  type: transparent
  children:
    sample_prototype: *sample_prototype
  name: "split($.filesystempath, '/')[-1]"
  uri: "$.results.resource_uri"

# Each experiment have plan associated to it, so we create plan metadata prototype
exp_plan_metadata_prototype: &exp_plan_metadata_prototype
  type: file
  children: None
  name:  " $.environment.displayName + '_plannedexperiment.json' "
  uri: "$.plan.resource_uri"

# Metadata for root projection
exp_metadata_prototype: &exp_metadata_prototype
  type: file
  children: None
  name:  " $.displayName + '_metadata.json' "
  uri: "$.resource_uri"

root:
  type: transparent
  children:
    exp_metadata_prototype: *exp_metadata_prototype
    exp_plan_metadata_prototype: *exp_plan_metadata_prototype
    result_prototype: *result_prototype
  name: "$.displayName"
  uri: "$.objects.resource_uri"

